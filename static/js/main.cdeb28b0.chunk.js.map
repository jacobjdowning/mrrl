{"version":3,"sources":["data/vendor.ts","components/Item.tsx","components/Want.tsx","utils.ts","components/Suggestions.tsx","components/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Rarity","CostType","KnownItemIds","hurlgrl","name","inventory","itemId","SweetSeaVegetable","rarity","Normal","cost","type","Gold","quantity","JarOfFishFaces","Uncommon","Items","items","FlatulentFish","DirtyMurlocSock","UnidentifiedMass","HealthyMurlocLunch","Rare","CuriousMurlocHorn","CultistPinkyFinger","Epic","secret","SmellyPileOfGloop","GhostFood","flrgrrl","JustRegularButter","BagOfWhoKnowsWhat","BeckonersRosettaStone","ParticularlyDenseRock","grrmrlg","SlimyNagaEyeball","ExtraSlimySnail","DisintegratingSandSculpture","SeaGiantFootDust","OverwhelminglyAlluringIdol","mrrglrlr","PulsatingBloodStone","mrrl","UnusuallyWiseHermitCrab","CrimsonTidestallion","HungryHeraldsTentacleTaco","CuriouslyWarmKelpBundle","GrimyManapearlBracelet","PilferedArmorCrate","murloco","instruction","vendors","flatMap","v","itemsById","reduce","map","item","vendorByItemId","result","i","length","vendor","j","calculateItemIdToVendorMap","Item","_ref","onClick","react_default","a","createElement","className","concat","src","process","offeredItems","filter","sort","b","localeCompare","Want","onQuantityChange","wantedItems","includeSecretShop","wantedItemMap","val","onWantChange","event","target","value","getValue","toString","onChange","src_components_Item","findRoute","materials","JSON","parse","stringify","unidentifiedMass","find","Object","toConsumableArray","buyItem","existingQuantity","costItem","existingMatQuantiy","Error","stepCount","lastVendor","undefined","indexToBuy","findIndex","hasCostRequirements","nextToBuy","nextToBuyItem","console","log","push","splice","route","hasDirtySocks","step","other","ci","addCleanSockStep","nextStep","mergeSteps","acc","quantityInventory","isInInventory","Suggestions","onItemSelected","selectedItems","inv","shiftKey","Result","requiredMats","gold","index","mergeMaterials","toMergeInto","toMergeFrom","forEach","foundItem","App","_useState","useState","_useState2","slicedToArray","state","setState","calculateNewState","calculateRequiredMats","prevState","objectSpread","combinedMats","getCost","innerItem","src_components_Suggestions","shiftDown","newSelectedItems","selection","document","getSelection","removeAllRanges","defineProperty","selectedItemId","existingWantedItem","wi","src_components_Want","newWantedItems","checked","src_components_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdeb28b0.chunk.js","sourcesContent":["export enum Rarity {\r\n  Normal = 1,\r\n  Uncommon = 2,\r\n  Rare = 3,\r\n  Epic = 4\r\n}\r\n\r\nexport enum CostType {\r\n  Items,\r\n  Gold\r\n}\r\n\r\nexport interface GoldCost {\r\n  type: CostType.Gold;\r\n  quantity: number;\r\n}\r\n\r\nexport interface ItemsCost {\r\n  type: CostType.Items;\r\n  items: {\r\n    quantity: number;\r\n    itemId: number;\r\n  }[];\r\n}\r\n\r\nexport interface Item {\r\n  itemId: number;\r\n  name: string;\r\n  rarity: Rarity;\r\n  cost: GoldCost | ItemsCost;\r\n  mrrl?: boolean;\r\n  secret?: boolean;\r\n}\r\n\r\nexport interface Vendor {\r\n  name: string;\r\n  instruction?: string;\r\n  inventory: Item[];\r\n}\r\n\r\nexport enum KnownItemIds {\r\n  // Grrmlrg\r\n  FlatulentFish = 167906,\r\n  CuriousMurlocHorn = 167905,\r\n  ExtraSlimySnail = 167907,\r\n  SeaGiantFootDust = 167908,\r\n  OverwhelminglyAlluringIdol = 169781,\r\n\r\n  // Hurlgrl\r\n  HealthyMurlocLunch = 167913,\r\n  JarOfFishFaces = 167914,\r\n  SweetSeaVegetable = 167915,\r\n  DirtyMurlocSock = 167916,\r\n  CultistPinkyFinger = 169783,\r\n\r\n  // Flrgrrl\r\n  GhostFood = 167909,\r\n  BagOfWhoKnowsWhat = 167910,\r\n  JustRegularButter = 167911,\r\n  UnidentifiedMass = 167912,\r\n  BeckonersRosettaStone = 169782,\r\n\r\n  // Mrrglrlr\r\n  SlimyNagaEyeball = 167896,\r\n  ParticularlyDenseRock = 167902,\r\n  DisintegratingSandSculpture = 167903,\r\n  SmellyPileOfGloop = 167904,\r\n  PulsatingBloodStone = 169780,\r\n\r\n  // Mrrl\r\n  CuriouslyWarmKelpBundle = 168092,\r\n  GrimyManapearlBracelet = 168093,\r\n  PilferedArmorCrate = 168097,\r\n  UnusuallyWiseHermitCrab = 168053,\r\n  CrimsonTidestallion = 169202,\r\n\r\n  // Murloco\r\n  HungryHeraldsTentacleTaco = 170100\r\n}\r\n\r\nexport let hurlgrl: Vendor = {\r\n  name: \"Hurlgrl\",\r\n  inventory: [\r\n    {\r\n      name: \"Sweet Sea Vegetable\",\r\n      itemId: KnownItemIds.SweetSeaVegetable,\r\n      rarity: Rarity.Normal,\r\n      cost: { type: CostType.Gold, quantity: 1 }\r\n    },\r\n    {\r\n      name: \"Jar of Fish Faces\",\r\n      itemId: KnownItemIds.JarOfFishFaces,\r\n      rarity: Rarity.Uncommon,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.FlatulentFish, quantity: 5 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Dirty Murloc Sock\",\r\n      itemId: KnownItemIds.DirtyMurlocSock,\r\n      rarity: Rarity.Uncommon,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.UnidentifiedMass, quantity: 6 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Healthy Murloc Lunch\",\r\n      itemId: KnownItemIds.HealthyMurlocLunch,\r\n      rarity: Rarity.Rare,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.CuriousMurlocHorn, quantity: 5 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Cultist Pinky Finger\",\r\n      itemId: KnownItemIds.CultistPinkyFinger,\r\n      rarity: Rarity.Epic,\r\n      secret: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.SmellyPileOfGloop, quantity: 5 },\r\n          { itemId: KnownItemIds.GhostFood, quantity: 7 }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nexport let flrgrrl: Vendor = {\r\n  name: \"Flrgrrl\",\r\n  inventory: [\r\n    {\r\n      name: \"Unindentified Mass\",\r\n      itemId: KnownItemIds.UnidentifiedMass,\r\n      rarity: Rarity.Normal,\r\n      cost: { type: CostType.Gold, quantity: 1 }\r\n    },\r\n    {\r\n      name: \"Just Regular Butter\",\r\n      itemId: KnownItemIds.JustRegularButter,\r\n      rarity: Rarity.Uncommon,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.SweetSeaVegetable, quantity: 4 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Bag of Who-Knows-What\",\r\n      itemId: KnownItemIds.BagOfWhoKnowsWhat,\r\n      rarity: Rarity.Uncommon,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.FlatulentFish, quantity: 2 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Ghost Food\",\r\n      itemId: KnownItemIds.GhostFood,\r\n      rarity: Rarity.Rare,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.CuriousMurlocHorn, quantity: 6 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Beckoner's Rosetta Stone\",\r\n      itemId: KnownItemIds.BeckonersRosettaStone,\r\n      rarity: Rarity.Epic,\r\n      secret: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.SmellyPileOfGloop, quantity: 2 },\r\n          { itemId: KnownItemIds.ParticularlyDenseRock, quantity: 9 }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nexport let grrmrlg: Vendor = {\r\n  name: \"Grrmrlg\",\r\n  inventory: [\r\n    {\r\n      name: \"Flatulent Fish\",\r\n      itemId: KnownItemIds.FlatulentFish,\r\n      rarity: Rarity.Normal,\r\n      cost: { type: CostType.Gold, quantity: 1 }\r\n    },\r\n    {\r\n      name: \"Curious Murloc Horn\",\r\n      itemId: KnownItemIds.CuriousMurlocHorn,\r\n      rarity: Rarity.Uncommon,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.SlimyNagaEyeball, quantity: 3 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Extra-Slimy Snail\",\r\n      itemId: KnownItemIds.ExtraSlimySnail,\r\n      rarity: Rarity.Rare,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.DisintegratingSandSculpture, quantity: 5 }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Sea Giant Foot Dust\",\r\n      itemId: KnownItemIds.SeaGiantFootDust,\r\n      rarity: Rarity.Rare,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          {\r\n            itemId: KnownItemIds.DirtyMurlocSock, // It needs clean socks, but for simplicity let's use dirty..\r\n            quantity: 3\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Overwhelmingly-Alluring Idol\",\r\n      itemId: KnownItemIds.OverwhelminglyAlluringIdol,\r\n      rarity: Rarity.Epic,\r\n      secret: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.HealthyMurlocLunch, quantity: 8 },\r\n          { itemId: KnownItemIds.GhostFood, quantity: 4 }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nexport let mrrglrlr: Vendor = {\r\n  name: \"Mrrglrlr\",\r\n  inventory: [\r\n    {\r\n      name: \"Slimy Naga Eyeball\",\r\n      itemId: KnownItemIds.SlimyNagaEyeball,\r\n      rarity: Rarity.Normal,\r\n      cost: { type: CostType.Gold, quantity: 1 }\r\n    },\r\n\r\n    {\r\n      name: \"Disintegrating Sand Sculpture\",\r\n      itemId: KnownItemIds.DisintegratingSandSculpture,\r\n      rarity: Rarity.Uncommon,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          {\r\n            itemId: KnownItemIds.SweetSeaVegetable,\r\n            quantity: 4\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Particularly Dense Rock\",\r\n      itemId: KnownItemIds.ParticularlyDenseRock,\r\n      rarity: Rarity.Rare,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          {\r\n            itemId: KnownItemIds.BagOfWhoKnowsWhat,\r\n            quantity: 3\r\n          },\r\n          {\r\n            itemId: KnownItemIds.JarOfFishFaces,\r\n            quantity: 3\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Smelly Pile of Gloop\",\r\n      itemId: KnownItemIds.SmellyPileOfGloop,\r\n      rarity: Rarity.Rare,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [{ itemId: KnownItemIds.JustRegularButter, quantity: 2 }]\r\n      }\r\n    },\r\n    {\r\n      name: \"Pulsating Blood Stone\",\r\n      itemId: KnownItemIds.PulsatingBloodStone,\r\n      rarity: Rarity.Epic,\r\n      secret: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.SeaGiantFootDust, quantity: 8 },\r\n          { itemId: KnownItemIds.HealthyMurlocLunch, quantity: 7 }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nexport let mrrl: Vendor = {\r\n  name: \"Mrrl\",\r\n  inventory: [\r\n    {\r\n      name: \"Unusually Wise Hermit Crab\",\r\n      itemId: KnownItemIds.UnusuallyWiseHermitCrab,\r\n      rarity: Rarity.Epic,\r\n      mrrl: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.HealthyMurlocLunch, quantity: 4 },\r\n          { itemId: KnownItemIds.ParticularlyDenseRock, quantity: 2 },\r\n          { itemId: KnownItemIds.ExtraSlimySnail, quantity: 3 }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Crimson Tidestallion\",\r\n      itemId: KnownItemIds.CrimsonTidestallion,\r\n      rarity: Rarity.Epic,\r\n      mrrl: true,\r\n      secret: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.CultistPinkyFinger, quantity: 4 },\r\n          { itemId: KnownItemIds.PulsatingBloodStone, quantity: 2 },\r\n          { itemId: KnownItemIds.HungryHeraldsTentacleTaco, quantity: 3 }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Curiously Warm Kelp Bundle\",\r\n      itemId: KnownItemIds.CuriouslyWarmKelpBundle,\r\n      rarity: Rarity.Epic,\r\n      mrrl: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.ParticularlyDenseRock, quantity: 2 },\r\n          { itemId: KnownItemIds.GhostFood, quantity: 4 },\r\n          { itemId: KnownItemIds.HealthyMurlocLunch, quantity: 5 }\r\n        ]\r\n      }\r\n    },\r\n    // {\r\n    //     name: \"Severely Rusted Lockbox\",\r\n\r\n    // }\r\n    {\r\n      name: \"Grimy Manapearl Bracelet\",\r\n      itemId: KnownItemIds.GrimyManapearlBracelet,\r\n      rarity: Rarity.Epic,\r\n      mrrl: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.SmellyPileOfGloop, quantity: 3 },\r\n          { itemId: KnownItemIds.GhostFood, quantity: 1 },\r\n          { itemId: KnownItemIds.SeaGiantFootDust, quantity: 3 }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      name: \"Pilfered Armor Crate\",\r\n      itemId: KnownItemIds.PilferedArmorCrate,\r\n      rarity: Rarity.Epic,\r\n      mrrl: true,\r\n      cost: {\r\n        type: CostType.Items,\r\n        items: [\r\n          { itemId: KnownItemIds.SeaGiantFootDust, quantity: 3 },\r\n          { itemId: KnownItemIds.SmellyPileOfGloop, quantity: 4 },\r\n          { itemId: KnownItemIds.ParticularlyDenseRock, quantity: 3 }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nlet murloco: Vendor = {\r\n  name: \"Murloco\",\r\n  instruction:\r\n    \"Found at 46.22 32.57 in Nazjatar. Kill the 2 Naga guards to release Murloco.\",\r\n  inventory: [\r\n    {\r\n      name: \"Hungry Herald's Tentacle Taco\",\r\n      itemId: KnownItemIds.HungryHeraldsTentacleTaco,\r\n      rarity: Rarity.Epic,\r\n      cost: {\r\n        type: CostType.Gold,\r\n        quantity: 666\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nlet vendors: Vendor[] = [hurlgrl, grrmrlg, mrrglrlr, flrgrrl, mrrl, murloco];\r\n\r\nexport let items = vendors.flatMap(v => v.inventory);\r\nexport let itemsById = items.reduce(\r\n  (map, item) => {\r\n    map[item.itemId] = item;\r\n    return map;\r\n  },\r\n  <{ [id: number]: Item }>{}\r\n);\r\n\r\nfunction calculateItemIdToVendorMap(vendors: Vendor[]) {\r\n  var result: { [itemId: number]: Vendor } = {};\r\n\r\n  for (let i = 0; i < vendors.length; i++) {\r\n    let vendor = vendors[i];\r\n    for (let j = 0; j < vendor.inventory.length; j++) {\r\n      let item = vendor.inventory[j];\r\n      result[item.itemId] = vendor;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport let vendorByItemId = calculateItemIdToVendorMap(vendors);\r\n\r\nexport default vendors;\r\n","import React from \"react\";\r\n\r\nimport { itemsById } from \"../data/vendor\";\r\n\r\nimport \"./Item.css\";\r\n\r\ninterface Props {\r\n  itemId: number;\r\n  onClick?: (event: any) => void;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ itemId, onClick }) => {\r\n  return (\r\n    <div className={`item item--${itemsById[itemId].rarity}`} onClick={onClick}>\r\n      <img\r\n        className=\"item__image\"\r\n        src={process.env.PUBLIC_URL + \"items/\" + itemId + \".jpg\"}\r\n      />\r\n      <span className=\"item__name\">{itemsById[itemId].name}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React, { useState, ChangeEvent } from \"react\";\r\n\r\nimport { items, Rarity } from \"../data/vendor\";\r\nimport Item from \"./Item\";\r\nimport { WantedItem } from \"../App\";\r\n\r\nimport \"./Want.css\";\r\n\r\nlet offeredItems = items\r\n  .filter(i => !i.mrrl && (i.rarity == Rarity.Rare || i.rarity == Rarity.Epic))\r\n  .sort((a, b) => {\r\n    if (a.rarity == b.rarity) {\r\n      return a.name.localeCompare(b.name);\r\n    }\r\n\r\n    // Inverted to get Epic as first (descending).\r\n    return b.rarity - a.rarity;\r\n  });\r\n\r\ninterface Props {\r\n  wantedItems: WantedItem[];\r\n  includeSecretShop: boolean;\r\n  onQuantityChange: (itemId: number, quantity: number) => void;\r\n}\r\n\r\nconst Want: React.FC<Props> = ({\r\n  onQuantityChange,\r\n  wantedItems,\r\n  includeSecretShop\r\n}) => {\r\n  let wantedItemMap = wantedItems.reduce((map: any, val) => {\r\n    map[val.itemId] = val.quantity;\r\n    return map;\r\n  }, {});\r\n\r\n  const onWantChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const target = event.target;\r\n    const itemId = +target.name;\r\n    const quantity = +target.value;\r\n\r\n    onQuantityChange(itemId, quantity);\r\n  };\r\n\r\n  const getValue = (itemId: number) => {\r\n    let quantity = wantedItemMap[itemId];\r\n    if (quantity == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return quantity.toString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"want__container\">\r\n      <h2>Materials</h2>\r\n      <div className=\"want__items\">\r\n        {offeredItems\r\n          .filter(item => !item.secret || includeSecretShop)\r\n          .map(item => (\r\n            <div className={`col-6 want__item want__item--${item.rarity}`}>\r\n              <input\r\n                type=\"number\"\r\n                className=\"want__input\"\r\n                name={item.itemId.toString()}\r\n                onChange={onWantChange}\r\n                value={getValue(item.itemId)}\r\n              />\r\n              <Item itemId={item.itemId} />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Want;\r\n","import vendors, {\r\n  KnownItemIds,\r\n  itemsById,\r\n  CostType,\r\n  vendorByItemId,\r\n  Item,\r\n  Vendor\r\n} from \"./data/vendor\";\r\nimport { setupMaster } from \"cluster\";\r\n\r\ninterface Materials {\r\n  items: { itemId: number; quantity: number }[];\r\n  gold: number;\r\n}\r\n\r\ninterface Inventory {\r\n  [itemId: number]: number;\r\n}\r\n\r\nexport interface RouteStep {\r\n  vendor?: string;\r\n  items: { itemId: number; quantity: number }[];\r\n  quantity?: number;\r\n  other?: string;\r\n}\r\n\r\nexport function findRoute(materials: Materials): RouteStep[] {\r\n  if (materials.items.length == 0) {\r\n    return [];\r\n  }\r\n\r\n  let result: RouteStep[] = [];\r\n\r\n  materials = JSON.parse(JSON.stringify(materials));\r\n  let inventory: Inventory = {};\r\n  // Start with Unidentified Mass for now. Simple way to make sure we have dirty socks to clean when go see the Murloc in the water.\r\n  const unidentifiedMass = materials.items.find(\r\n    item => item.itemId == KnownItemIds.UnidentifiedMass\r\n  );\r\n\r\n  if (unidentifiedMass != null) {\r\n    materials.items = [\r\n      unidentifiedMass,\r\n      ...materials.items.filter(i => i != unidentifiedMass)\r\n    ];\r\n  }\r\n\r\n  const buyItem = (item: Item, quantity: number) => {\r\n    let existingQuantity = inventory[item.itemId];\r\n    if (existingQuantity != null) {\r\n      inventory[item.itemId] = existingQuantity + quantity;\r\n    } else {\r\n      inventory[item.itemId] = quantity;\r\n    }\r\n\r\n    // Remove mats from inventory\r\n    if (item.cost.type == CostType.Items) {\r\n      for (let i = 0; i < item.cost.items.length; i++) {\r\n        let costItem = item.cost.items[i];\r\n        let existingMatQuantiy = inventory[costItem.itemId];\r\n        if (existingMatQuantiy != null) {\r\n          if (existingMatQuantiy < quantity * costItem.quantity) {\r\n            throw new Error(\"Not enough mats!\");\r\n          } else {\r\n            inventory[costItem.itemId] =\r\n              existingMatQuantiy - quantity * costItem.quantity;\r\n          }\r\n        } else {\r\n          throw new Error(\"Buying something we don't have the math for!\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  let stepCount = 0;\r\n  let lastVendor: Vendor | undefined = undefined;\r\n  while (materials.items.length > 0) {\r\n    let indexToBuy = materials.items.findIndex(\r\n      item =>\r\n        vendorByItemId[item.itemId] == lastVendor &&\r\n        hasCostRequirements(inventory, item.itemId, item.quantity)\r\n    );\r\n    if (indexToBuy < 0) {\r\n      indexToBuy = materials.items.findIndex(item =>\r\n        hasCostRequirements(inventory, item.itemId, item.quantity)\r\n      );\r\n      if (indexToBuy < 0) {\r\n        throw new Error(\"Couldn't find a next item to buy??.\");\r\n      }\r\n    }\r\n\r\n    let nextToBuy = materials.items[indexToBuy];\r\n    let nextToBuyItem = itemsById[nextToBuy.itemId];\r\n\r\n    var vendor = vendorByItemId[nextToBuy.itemId];\r\n\r\n    console.log(`Want to buy ${nextToBuy.quantity}x${nextToBuy.itemId}`);\r\n    console.log(`It is sold by: ${vendor.name}`);\r\n\r\n    buyItem(nextToBuyItem, nextToBuy.quantity);\r\n\r\n    let lastResult = result[result.length - 1];\r\n\r\n    result.push({\r\n      vendor: vendor.name,\r\n      items: [{ itemId: nextToBuy.itemId, quantity: nextToBuy.quantity }]\r\n    });\r\n\r\n    lastVendor = vendor;\r\n\r\n    // if (nextToBuy.itemId == KnownItemIds.DirtyMurlocSock) {\r\n    //   result.push({\r\n    //     other: \"Clean the dirty socks.\"\r\n    //   });\r\n    // }\r\n\r\n    materials.items.splice(indexToBuy, 1);\r\n\r\n    stepCount++;\r\n\r\n    if (stepCount > 50) {\r\n      throw new Error(\"Couldn't find a route.\");\r\n    }\r\n  }\r\n\r\n  addCleanSockStep(result);\r\n  mergeSteps(result);\r\n  return result;\r\n}\r\n\r\nfunction mergeSteps(route: RouteStep[]) {\r\n  for (let i = 0; i < route.length - 1; i++) {\r\n    let step = route[i];\r\n    let nextStep = route[i + 1];\r\n\r\n    if (step.vendor == nextStep.vendor) {\r\n      step.items = step.items.concat(nextStep.items);\r\n      if (nextStep.other != null) {\r\n        step.other = nextStep.other;\r\n      }\r\n\r\n      route.splice(i + 1, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addCleanSockStep(route: RouteStep[]) {\r\n  let hasDirtySocks = false;\r\n  let hasCleanedSocks = false;\r\n\r\n  for (let i = 0; i < route.length; i++) {\r\n    let step = route[i];\r\n\r\n    if (step.items != null) {\r\n      if (step.items.find(i => i.itemId == KnownItemIds.DirtyMurlocSock)) {\r\n        hasDirtySocks = true;\r\n      }\r\n\r\n      // If we have dirt socks and at Flrgrrl, clean them.\r\n      if (hasDirtySocks && step.vendor != null && step.vendor == \"Flrgrrl\") {\r\n        route.splice(i, 0, {\r\n          vendor: \"Flrgrrl\",\r\n          items: [],\r\n          other: \"Clean the dirty socks.\"\r\n        });\r\n        hasDirtySocks = false;\r\n        hasCleanedSocks = true;\r\n        break;\r\n      }\r\n\r\n      // If we have dirty socks and we need clean socks to buy the next item, must clean them.\r\n      if (\r\n        hasDirtySocks &&\r\n        step.items.find(i => {\r\n          let item = itemsById[i.itemId];\r\n          if (item.cost.type == CostType.Items) {\r\n            return (\r\n              item.cost.items.findIndex(\r\n                ci => ci.itemId == KnownItemIds.DirtyMurlocSock\r\n              ) >= 0\r\n            );\r\n          }\r\n\r\n          return false;\r\n        })\r\n      ) {\r\n        route.splice(i, 0, {\r\n          vendor: \"Flrgrrl\",\r\n          items: [],\r\n          other: \"Clean the dirty socks.\"\r\n        });\r\n\r\n        hasDirtySocks = false;\r\n        hasCleanedSocks = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction hasCostRequirements(\r\n  inventory: Inventory,\r\n  itemId: number,\r\n  quantity: number\r\n) {\r\n  let item = itemsById[itemId];\r\n\r\n  if (item.cost.type == CostType.Gold) {\r\n    return true; // Always have the gold!\r\n  } else if (item.cost.type == CostType.Items) {\r\n    // Can probably change this to something that has early return but whatever\r\n    return item.cost.items.reduce((acc, val) => {\r\n      let quantityInventory = inventory[val.itemId];\r\n      let isInInventory =\r\n        quantityInventory != null &&\r\n        quantityInventory >= quantity * val.quantity;\r\n\r\n      return acc && isInInventory;\r\n    }, true);\r\n  }\r\n\r\n  return false;\r\n}\r\n","import React from \"react\";\r\n\r\nimport { mrrl } from \"../data/vendor\";\r\nimport Item from \"./Item\";\r\n\r\nimport \"./Suggestions.css\";\r\n\r\ninterface Props {\r\n  onItemSelected: (itemId: number, shiftPressed: boolean) => void;\r\n  includeSecretShop: boolean;\r\n  selectedItems: { [itemId: number]: any };\r\n}\r\n\r\nconst Suggestions: React.FC<Props> = ({\r\n  includeSecretShop,\r\n  onItemSelected,\r\n  selectedItems\r\n}) => {\r\n  return (\r\n    <div className=\"suggestions__container\">\r\n      <h2>\r\n        Select an item you want to buy here, or populate the materials manually.\r\n      </h2>\r\n      <div className=\"suggestions__filter\">\r\n        Filter: <input type=\"text\" />\r\n      </div>\r\n\r\n      <div className=\"suggestions__results\">\r\n        {mrrl.inventory\r\n          .filter(inv => !inv.secret || includeSecretShop)\r\n          .map(inv => (\r\n            <div\r\n              className={\r\n                \"col-4 suggestions__item \" +\r\n                (selectedItems[inv.itemId] ? \"suggestions__item--selected\" : \"\")\r\n              }\r\n            >\r\n              <Item\r\n                itemId={inv.itemId}\r\n                onClick={event => onItemSelected(inv.itemId, !!event.shiftKey)}\r\n              />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Suggestions;\r\n","import React from \"react\";\r\nimport { Materials } from \"../App\";\r\nimport { RouteStep } from \"../utils\";\r\n\r\nimport \"./Result.css\";\r\nimport Item from \"./Item\";\r\n\r\ninterface Props {\r\n  route: RouteStep[];\r\n  requiredMats: Materials;\r\n}\r\n\r\nconst Result: React.FC<Props> = ({ route, requiredMats }) => {\r\n  return (\r\n    <div className=\"results__container\">\r\n      <h2>Results</h2>\r\n      Cost: {requiredMats.gold} Gold\r\n      <h3>Steps</h3>\r\n      <div className=\"results__route\">\r\n        <table className=\"results__steps\">\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Vendor</th>\r\n            <th>Items/Action</th>\r\n          </tr>\r\n          {route.map((step, index) => (\r\n            <tr>\r\n              <td>{index + 1}</td>\r\n              <td className=\"results__vendor\">\r\n                <div>{step.vendor}</div>\r\n                <div>\r\n                  <img\r\n                    src={\r\n                      process.env.PUBLIC_URL +\r\n                      \"/images/npc/\" +\r\n                      step.vendor +\r\n                      \".jpg\"\r\n                    }\r\n                  />\r\n                </div>\r\n              </td>\r\n              <td>\r\n                {step.items &&\r\n                  step.items.map(item => (\r\n                    <div className=\"results__item\">\r\n                      <span className=\"col-3 results__quantity\">\r\n                        {item.quantity}\r\n                      </span>\r\n                      <div className=\"col-10\">\r\n                        <Item itemId={item.itemId} />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                <div className=\"results__other\">{step.other}</div>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { useState, ChangeEvent } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./simple-grid.css\";\n\nimport { itemsById, CostType, items } from \"./data/vendor\";\nimport Want from \"./components/Want\";\nimport { findRoute, RouteStep } from \"./utils\";\nimport Suggestions from \"./components/Suggestions\";\nimport Result from \"./components/Result\";\n\nexport interface WantedItem {\n  itemId: number;\n  quantity: number;\n}\ninterface State {\n  wantedItems: WantedItem[];\n  route: RouteStep[];\n  requiredMats: Materials;\n  includeSecretShop: boolean;\n  selectedItems: { [itemId: number]: any };\n}\n\nexport interface Materials {\n  items: { itemId: number; quantity: number }[];\n  gold: number;\n}\n\nconst mergeMaterials = (toMergeInto: Materials, toMergeFrom: Materials) => {\n  toMergeInto.gold = toMergeInto.gold + toMergeFrom.gold;\n\n  toMergeFrom.items.forEach(item => {\n    let foundItem = toMergeInto.items.find(i => i.itemId == item.itemId);\n    if (foundItem) {\n      foundItem.quantity = foundItem.quantity + item.quantity;\n    } else {\n      toMergeInto.items.push(item);\n    }\n  });\n};\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<State>({\n    wantedItems: [],\n    route: [],\n    requiredMats: { items: [], gold: 0 },\n    includeSecretShop: true,\n    selectedItems: {}\n  });\n\n  const onQuantityChange = (itemId: number, quantity: number) => {\n    const newWantedItems = state.wantedItems.filter(wi => wi.itemId != itemId);\n    if (quantity > 0) {\n      newWantedItems.push({ itemId, quantity });\n    }\n\n    calculateNewState(newWantedItems);\n  };\n\n  const calculateNewState = (wantedItems: WantedItem[]): void => {\n    let requiredMats = calculateRequiredMats(wantedItems);\n    let route = findRoute(requiredMats);\n\n    setState(prevState => ({ ...prevState, wantedItems, route, requiredMats }));\n  };\n\n  const getCost = (itemId: number, quantity: number): Materials => {\n    // Add ourselves.\n    var result = { gold: 0, items: [{ itemId, quantity }] };\n\n    const item = itemsById[itemId];\n\n    if (item.cost.type == CostType.Gold) {\n      mergeMaterials(result, {\n        gold: quantity * item.cost.quantity,\n        items: []\n      });\n    } else if (item.cost.type == CostType.Items) {\n      for (let i = 0; i < item.cost.items.length; i++) {\n        const innerItem = item.cost.items[i];\n        const cost = getCost(innerItem.itemId, quantity * innerItem.quantity);\n\n        mergeMaterials(result, cost);\n      }\n    }\n\n    return result;\n  };\n\n  const calculateRequiredMats = (wantedItems: WantedItem[]) => {\n    let combinedMats: Materials = { gold: 0, items: [] };\n\n    wantedItems.forEach(item => {\n      mergeMaterials(combinedMats, getCost(item.itemId, item.quantity));\n    });\n\n    return combinedMats;\n  };\n\n  const onItemSelected = (itemId: number, shiftDown: boolean) => {\n    var newSelectedItems = { ...state.selectedItems };\n    if (shiftDown) {\n      newSelectedItems[itemId] = true;\n      // Clear text selection.\n      let selection = document.getSelection();\n      if (selection != null) {\n        selection.removeAllRanges();\n      }\n    } else {\n      newSelectedItems = { [itemId]: true };\n    }\n\n    let wantedItems: WantedItem[] = [];\n\n    for (let selectedItemId in newSelectedItems) {\n      let item = itemsById[selectedItemId];\n\n      if (item.cost.type == CostType.Items) {\n        item.cost.items.forEach(({ itemId, quantity }) => {\n          wantedItems.push({ itemId, quantity: quantity });\n        });\n      }\n    }\n\n    // Merge identical wanted items\n\n    wantedItems = wantedItems.reduce((acc: any, val) => {\n      var existingWantedItem = acc.find((wi: any) => wi.itemId == val.itemId);\n\n      if (existingWantedItem != null) {\n        existingWantedItem.quantity =\n          existingWantedItem.quantity + val.quantity;\n      } else {\n        acc.push({ itemId: val.itemId, quantity: val.quantity });\n      }\n\n      return acc;\n    }, []);\n\n    var newSelectedItems = { ...state.selectedItems };\n    if (shiftDown) {\n      newSelectedItems[itemId] = true;\n      // Clear text selection.\n      let selection = document.getSelection();\n      if (selection != null) {\n        selection.removeAllRanges();\n      }\n    } else {\n      newSelectedItems = { [itemId]: true };\n    }\n\n    setState(prevState => ({\n      ...prevState,\n      selectedItems: newSelectedItems\n    }));\n\n    calculateNewState(wantedItems);\n  };\n\n  const onSecretShopChangeChecked = (event: ChangeEvent<HTMLInputElement>) => {\n    const checked = event.target.checked;\n\n    setState(prevState => ({\n      ...prevState,\n      includeSecretShop: checked\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Mrrl!</h1>\n      <Suggestions\n        onItemSelected={onItemSelected}\n        includeSecretShop={state.includeSecretShop}\n        selectedItems={state.selectedItems}\n      />\n      <Want\n        onQuantityChange={onQuantityChange}\n        wantedItems={state.wantedItems}\n        includeSecretShop={state.includeSecretShop}\n      />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={state.includeSecretShop}\n          onChange={onSecretShopChangeChecked}\n        />\n        Include secret shop (cloak required)\n      </label>\n      <Result route={state.route} requiredMats={state.requiredMats} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}